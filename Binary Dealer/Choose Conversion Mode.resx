<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABnUEcAAAAAAIp8cQVhWFBWaF9XtW5lXtFsZF7UbGRf1WxkXtVrY17Va2Nd1WtjXdVqY13VamNc1Wpj
        XNVrY1zVa2Nc1WtjXNZpYlzSWFFLvS4rJ4sHBgVfAAAANAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB2YlsBbWJYmoyFf/+7u7f/ssem/567kP+mvJr/r8Cn/7rEtP/EyMD/y8zI/9DP
        z//V0tT/2NTX/9nV2P/Y1df/1tTV/9jY1/+5uLX/jYaA/4B6dt0oJCGOAAAAUAEBASAAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZZTy+Ph4HjysrK/8nMyP+VxX//f8Nq/3G9Xv91wGb/fcNx/4TE
        ef+Kxn3/j8eA/5jKif+l0Zn/vN2z/9rs1v/z9/P//////+Lj4/6IhoT/tLCs/6uopvVOR0G8AAAAWAAA
        AS0CAQEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbGFYS6Whnf3Ly8v/zs3O/5SviP9ut1T/hsx+/37K
        ef95ynj/dct5/3POe/9y0H//ddGD/3fRg/90zXz/bchw/2fDZP+a1pb/w8XD/4+Pj/6moZz+1NXV/sbG
        xf5mXVbYAAAAZgAAADEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAABwZVxMqqaj/sXFxf8oKCj/PTo//0Z1
        MP+FyHb/gMt9/33MfP95zXz/dM18/3DQf/9z0oT/dteN/3ncmP+A4aH/j+qx/1yVYP88Pjz/l5eY/62o
        o/7j5OT/zs7O/sbGxf9sZmDXAgIBcAAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAHBkW0yzr6v+eXl5/4GB
        gf+7urv/SEdI/2KiR/99yXP/fc1+/3nNff91zn7/ctB//3PThf92147/etyW/3/gn/+J4qb/lcGW/8nK
        yP+NjY3/s66q//T09P7d3d3/z8/P/sbExP9tZ2LSAAAAaQAAACwBAAACAAAAAAAAAAAAAAAAb2RbTLu3
        s/5RUVH/mpqa/8LCwv9HRkj/i42K/2egVP+S2JP/eM18/3bPf/9y0ID/dNSG/3bXjv973Zf/geGi/4je
        o/+Ns4v/w8TD/5ycnP+1r6v//f7+/+7u7v7b29v/z8/P/sPBwP9iW1bOAAAAXwEBASIAAAAAAAAAAAAA
        AABvZFtMu7az/mNjY/+Ghob/vr6+/05IUP9um1n/cbRe/5DWkv94zXz/d8+A/3LRgf9z1Yf/d9iQ/3vd
        mP+C4aT/hdec/4Klfv/r6+r/u7u7/7Wwrf/+/v//9/f3/+3t7f/a2tr/zs7P/sLAv/9JQTu7AAAASwEB
        ABEAAAAAAAAAAHBlW0yyrqr+t7e3/zo5Ov9dZFn/Pnwj/4DFbv+V15f/esx8/3rOgP920H//cNCA/3TV
        if932JH/e92Z/4Pjpv+Bz5H/gJ58//b19v/y8vH/y8nH/+no5//7+/v/9/f3/+zs7P7Y2Nj/z9DQ/bCt
        qvsqJB+XAAAAOAAAAAMAAAAAcWVbTLKuqv7Qz9H/o7Kc/1OVNf+Qz4L/is+H/37MfP98zX//ec6A/2/O
        fP9x0YL/ddaK/3jZkv983Zr/heOo/4nVk//M5cn/+fn5//n5+f/x8O//xsG9/9vY1v/Y1tP/0c/N/8zJ
        yP7Av7z/vr27/oqHg98HBQRoAAAAEwAAAABvZFtMurK0/rjEsv9vslD/k8+F/4vOhf+DzH7/f81+/3vN
        fv9xzHn/bc15/3HThf901ov/eNqT/3zem/+J5Kv/ecJ9/56unP/p6en/+fn5/+3t7f+dnJz/uLWz/9vY
        1v/a2NX/kY6M/5qYlf7Rz8z/opyY/js1MKEAAAAnAAAAAHVnYkywr6j+VaMt/6bWm/+Hyn3/hsx//4HM
        ff99zX3/dst5/23Md/+D2Zb/c8t2/3fXjf9525X/fd6b/4vlrf98wnv/RExD/3t7e//19fX/goKC/3Jy
        cv9ERET/6enp/6qqqv9ra2v/Ojo6/62trf7a19X/Zl5Y1hIQDjEAAAAAeGtlTFWIL/6r157/isp+/4jK
        fv+Dy3z/f8t8/3nLef9uynT/gNKK/2K3UP9+v2//acRn/3zdmP9735z/jOWt/5DRjf/8/fz/FRUV/+/v
        7/9RUVH//////zY2Nv+np6f/ZGRk/8zMzP/X19f/UlJS/+fm5v95cmvsGxcUMwAAAABKfSJOh7du/4/L
        gf+IyXz/hMl7/4HKev96yXb/cMl0/3fNef88gSz/qr2l//Tr9v+ZypL/dtGE/37fn/+P5K7/kc2N////
        //8PDw//6enp/0FBQf//////U1NT/4mJif9YWFj/09PT/97e3v9DQ0P/5+bl/3pya+0cGBU0AHUABFak
        MYyNxnj/ich6/oXIeP+ByHj/fMh2/2vFa/96znz/icd2/0RKQf/a2Nv/4eHh/4+Vjf9Tl0r/heCg/5Hj
        rv+Swo3/5+Lo/x4eHv/y8vL/SUlJ//v7+/8oKCj/x8fH/2NjY/+9vb3/wMDA/2ZmZv/o5+b/eXFr7RwY
        FTQzkQIUbrNO5ZnPi/+Ex3T+gMdz/3zHc/9owGL/gM+C/0SRKv8XGhX/hoWH//Dw8P+RkZH/Ghga/4yb
        iv91x3D/neCu/0FePv8bGBz/vr6+//Dw8P+Hh4f/FhYW/4CAgP/5+fn/vLy8/ycnJ/86Ojr/4OHh/9jX
        1v95cmvsGxgVM0qeJzSLw3L/h8d3/37Db/98xG//ar9f/2zFa/9WrTv/5vHk///////5+fn/7Ozs//b2
        9v//////+vX6/7fZs/86qS//7/nv///////u7u7/6+vr//j4+P//////9vb2/+vr6//x8fH/////////
        ///p6en/1NPS/3pxa+wbGBUzUKElYpTKgf96wGf/esNr/mi9W/9evVj/Y7lV/7/ftP/Fwcf/n6Cf/6Oj
        o//j4+P/7Ozs/6ampv+nqKf/6+br/8Xdwv+2urb/mJiY/9XV1f/q6ur/vb29/5ycnP+ZmZn/2dnZ/9HR
        0f+bm5v/mpqa/7u7u//X1tX/eXFr7BsYFTNSoieNj8h8/3S9Yf5ht0//V7ZI/2C7Vv91u17/9fny/6ur
        q/89PT3/gICA//Ly8v97e3v/eHh4/2FhYf+qqqr/0s/S/15eXv9+fn7/WVlZ/+jo6P+ysrL/Kioq/319
        ff/h4eH/zMzM/zY2Nv9gYGD/wcHB/9PS0f96cWvsHBgVM1KjJ66GxHL/WbFD/1SyQ/9Zt0r/XbdN/7TY
        pv/49/f/7u7u/19fX/+/v7//+fn5/x8fH//n5+f/rq6u/4ODg/+urq7/jIyM//39/f8UFBT/4+Pj/+Tk
        5P9CQkL/yMjI/+Pj4//r6+v/WFhY/5OTk//h4eH/zMzL/3pya+wcGBUyT6Ejt2q4Uv9OrTb/VbJD/1u4
        T/93v2f/2+nU//n4+f/x8fH/YGBg/8DAwP/4+Pj/HBwc/+/v7/+7u7v/gICA/56env+VlZX//////xER
        Ef/h4eH/5eXl/0JCQv/Gxsb/4ODg/+fn5/9YWFj/kZGR/93d3f/Kycj/enJr7BwYFTJMnx+xa7hT/0+u
        OP9VskP/ZL5b/4C7a//s8Ov//f39/7CwsP9MTEz/wMDA//////85OTn/q6ur/39/f/+pqan/ubm5/2Fh
        Yf+6urr/MjIy/+rq6v+3t7f/Li4u/8bGxv/e3t7/xMTE/zU1Nf+Ojo7/2dnZ/8jHxv96cmvsHBgVMkqf
        HI9xulr/Tq44/1WzQ/9swWb/hrxv//f29///////f39//2BgYP/a2tr/+fn5/83Nzf9XV1f/dXV1/+bm
        5v/i4uL/cHBw/1VVVf/Dw8P/5+fn/4mJif9KSkr/0tLS/93d3f+mpqb/Nzc3/7Gxsf/X19f/xsXF/3lx
        a+wbGBUyRp0ZX3O6W/9Przr+VbNG/nHEaf+bzIT///////r6+v/5+fn/+fn5//7+/v/4+Pj/9/f3//Pz
        8//4+Pj/9PT0//Ly8v/w8PD/7Ozs//Hx8f/n5+f/5ubm/+Tk5P/m5ub/4ODg/9jY2P/W1tb/2dnZ/9PT
        0//Hxsb/enFr7BwYFjJCmxIzY7BD/161Tf9WtEb/csFp/2yaV//c2d3//////8HBwf+Tk5P/mZmZ/+fn
        5//x8fH/pqam/56env/q6ur/6+vr/6CgoP+Pj4//nJyc/+jo6P+3t7f/h4eH/4aGhv/Kysr/1dXV/5OT
        k/+Ghob/ycnJ/8nIx/95cWvrGxgVMjSSABZTpi3rZrlV/1a0R/5zwmn/VH0//2xpbf/39/f/vb29/0JC
        Qv+Pj4///////2tra/+EhIT/ZmZm/6Ojo//z8/P/lpaW/1hYWP+5ubn/7+/v/8HBwf8pKSn/j4+P/+Li
        4v94eHj/hISE/2FhYf96enr/0tHQ/3lxausbGBUyMJIABEqgHpFds0b/V7ZJ/nTFbP+LuHb/V1RY/+bm
        5v/4+Pj/Z2dn/8TExP//////HBwc//X19f+/v7//enp6///////R0dH/g4OD//Hx8f/u7u7/7+/v/0ZG
        Rv/R0dH/3Nzc/0pKSv/AwMD/xsbG/0JCQv/U09L/eXJr6hwYFTEAAAAAR4ceUmmuT/9WtUj/cMVr/4i5
        c/9XVVj/6urq//X19f9mZmb/wcHB//////8cHBz/8/Pz/8PDw/+AgID//////8/Pz/+CgoL/8PDw//Hx
        8f/v7+//RkZG/8/Pz//f39//SEhI/8HBwf/Hx8f/QUFB/9rY2P96cWvoIRwZKwAAAABxZ11HVosz+XC/
        Yf9kwV/+X5RP/2praf/39/f/2tra/1dXV//Dw8P//////0VFRf+xsbH/h4eH/7a2tv/4+Pj/qqqq/319
        ff/x8fH/8/Pz/9jY2P87Ozv/0tLS/+jo6P9ra2v/m5ub/5SUlP+EhIT+y8nI/3VsZdsvKSUcAAAAAHdb
        ZiJveVfXXac+/2jBYP5eoVb/z9fL//////5dXV3/dHR1/+Pj4///////5ubm/15fX/93d3j/9PT0/93d
        3f9XV1j/pKSk//X19f/z8/P/e3t7/2BgYP/j4+T/7+/v/8vLy/9ra2z/W1tc/tzd3f+fmZX/a2BYj21g
        WQMAAAAAAAAAAHZiZG5sd1T7WKg8/3PIa/+40a3/1tPR/97a2P/W1ND/1dLQ/9TRz//W09D/1NLP/9bT
        0f/T0M7/08/N/9PQzv/Oy8n/y8fF/8jGxP/MyMb/xsPA/8O/vf/Avbr/wL26/7u4tv+0sK3/lI2H/3Zr
        Y8psYFccAAAAAHJnXgAAAAAAcmpdA3RiYSVXijlMecBl3KLHleWAfW5efnRsVX50bFV+dGxVfnRsVX50
        bFV+dGxVfnRsVX50a1V9dGtVfnRrVX1zalV8cmpVfHNqVXxyaVV8cmlVe3FoVXtxaFV6cWhVe3FoVXlu
        ZlRwZVw6bmJZEwAAAAAAAAAA8AAH/8AAAf/AAAD/wAAAf8AAAD/AAAAfwAAAD8AAAAfAAAADwAAAA8AA
        AAHAAAABwAAAAcAAAAGAAAABgAAAAYAAAAGAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGAAAABgAAAAYAA
        AAGAAAABwAAAAcAAAAHAAAAB4AAAA/n///8=
</value>
  </data>
</root>